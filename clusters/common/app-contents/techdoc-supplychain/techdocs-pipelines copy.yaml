#@ load("@ytt:data", "data")

#@ if/end "testing-pipeline" not in data.values.excluded_templates:
---
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: techdocs-pipeline-task
spec:
  healthRule:
    singleConditionType: Succeeded
  params: 
    - name: techdocs_pipeline_matching_labels
      default: 
        apps.tanzu.vmware.com/pipeline: techdocs
    - name: techdocs_type
      default:
        component
  ytt: |
    #@ load("@ytt:data", "data")

    #@ def merge_labels():
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   return labels
    #@ end
    ---
    apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      name: #@ data.values.workload.metadata.name + "-techdocs"
      labels: #@ merge_labels()
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName
      taskRef:
        kind: ClusterTask
        name: techdocs-task
      params:
        - name: source-url
          value: #@ data.values.source.url
        - name: source-revision       
          value: #@ data.values.source.revision 
        - name: techdocs-type
          value: #@ data.values.params.techdocs_type
        - name: techdocs-subpath
          value: #@ data.values.workload.spec.source.subPath
        - name: component-name
          value: #@ data.values.workload.metadata.name